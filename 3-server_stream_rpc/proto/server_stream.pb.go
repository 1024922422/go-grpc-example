// Code generated by protoc-gen-go. DO NOT EDIT.
// source: 3-server_stream_rpc/proto/server_stream.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 定义发送请求信息
type SimpleRequest struct {
	// 定义发送的参数，采用驼峰命名方式，小写加下划线，如：student_name
	// 参数类型 参数名 标识号(不可重复)
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b9c9b28b5335367, []int{0}
}

func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(m, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// 定义响应信息
type SimpleResponse struct {
	// 定义接收的参数
	// 参数类型 参数名 标识号(不可重复)
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b9c9b28b5335367, []int{1}
}

func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponse.Unmarshal(m, b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return xxx_messageInfo_SimpleResponse.Size(m)
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SimpleResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// 定义流式响应信息
type StreamResponse struct {
	Str                  string   `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResponse) Reset()         { *m = StreamResponse{} }
func (m *StreamResponse) String() string { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()    {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b9c9b28b5335367, []int{2}
}

func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResponse.Unmarshal(m, b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return xxx_messageInfo_StreamResponse.Size(m)
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

func (m *StreamResponse) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "proto.SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "proto.SimpleResponse")
	proto.RegisterType((*StreamResponse)(nil), "proto.StreamResponse")
}

func init() {
	proto.RegisterFile("3-server_stream_rpc/proto/server_stream.proto", fileDescriptor_1b9c9b28b5335367)
}

var fileDescriptor_1b9c9b28b5335367 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xc1, 0x4a, 0xc5, 0x30,
	0x14, 0x44, 0x5f, 0xd4, 0x28, 0x5e, 0xf4, 0x21, 0xe1, 0x09, 0x0f, 0x57, 0x12, 0x37, 0x6e, 0xda,
	0x8a, 0x05, 0x17, 0xfd, 0x06, 0x57, 0xc9, 0x07, 0x94, 0xd8, 0xde, 0x45, 0xa1, 0x35, 0x31, 0xb9,
	0xed, 0x07, 0xf8, 0xe5, 0xd2, 0x1b, 0x15, 0xea, 0xc6, 0x55, 0x26, 0x93, 0x99, 0xcc, 0x81, 0xa2,
	0x2e, 0x12, 0xc6, 0x05, 0x63, 0x9b, 0x28, 0xa2, 0x9b, 0xda, 0x18, 0xba, 0x2a, 0x44, 0x4f, 0xbe,
	0xda, 0xf8, 0x25, 0x7b, 0x4a, 0xf2, 0xa1, 0x1f, 0xe0, 0xda, 0x0e, 0x53, 0x18, 0xd1, 0xe0, 0xc7,
	0x8c, 0x89, 0x94, 0x82, 0xb3, 0xde, 0x91, 0x3b, 0x8a, 0x7b, 0xf1, 0x78, 0x69, 0x58, 0xeb, 0x06,
	0xf6, 0x3f, 0xa1, 0x14, 0xfc, 0x7b, 0xc2, 0x35, 0xd5, 0xf9, 0x1e, 0x39, 0x25, 0x0d, 0x6b, 0x75,
	0x00, 0xb9, 0xb8, 0x71, 0xc6, 0xe3, 0x09, 0x57, 0xf3, 0x45, 0x6b, 0xd8, 0x5b, 0xde, 0xfd, 0xed,
	0xde, 0xc0, 0x69, 0xa2, 0xf8, 0x3d, 0xb0, 0xca, 0xe7, 0x4f, 0x01, 0x57, 0x39, 0x64, 0x99, 0x54,
	0xbd, 0x80, 0x34, 0x7e, 0x26, 0x54, 0x87, 0x4c, 0x5b, 0x6e, 0x18, 0xef, 0x6e, 0xff, 0xb8, 0xf9,
	0x63, 0xbd, 0x53, 0x0d, 0x5c, 0xbc, 0x0e, 0x89, 0x2c, 0xc5, 0xff, 0x9a, 0x1b, 0x24, 0xbd, 0x7b,
	0x12, 0x6f, 0xe7, 0xfc, 0x52, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xe6, 0xcb, 0xfc, 0x48,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamServerClient is the client API for StreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamServerClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ListStr(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (StreamServer_ListStrClient, error)
}

type streamServerClient struct {
	cc *grpc.ClientConn
}

func NewStreamServerClient(cc *grpc.ClientConn) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/proto.StreamServer/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) ListStr(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (StreamServer_ListStrClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamServer_serviceDesc.Streams[0], "/proto.StreamServer/ListStr", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServerListStrClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamServer_ListStrClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamServerListStrClient struct {
	grpc.ClientStream
}

func (x *streamServerListStrClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServerServer is the server API for StreamServer service.
type StreamServerServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	ListStr(*SimpleRequest, StreamServer_ListStrServer) error
}

// UnimplementedStreamServerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServerServer struct {
}

func (*UnimplementedStreamServerServer) Route(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (*UnimplementedStreamServerServer) ListStr(req *SimpleRequest, srv StreamServer_ListStrServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStr not implemented")
}

func RegisterStreamServerServer(s *grpc.Server, srv StreamServerServer) {
	s.RegisterService(&_StreamServer_serviceDesc, srv)
}

func _StreamServer_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StreamServer/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_ListStr_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServerServer).ListStr(m, &streamServerListStrServer{stream})
}

type StreamServer_ListStrServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type streamServerListStrServer struct {
	grpc.ServerStream
}

func (x *streamServerListStrServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _StreamServer_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStr",
			Handler:       _StreamServer_ListStr_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "3-server_stream_rpc/proto/server_stream.proto",
}
